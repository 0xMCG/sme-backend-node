/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../../common";

export type ErrorsAndWarningsStruct = {
  errors: PromiseOrValue<BigNumberish>[];
  warnings: PromiseOrValue<BigNumberish>[];
};

export type ErrorsAndWarningsStructOutput = [number[], number[]] & {
  errors: number[];
  warnings: number[];
};

export type OfferItemStruct = {
  itemType: PromiseOrValue<BigNumberish>;
  token: PromiseOrValue<string>;
  identifierOrCriteria: PromiseOrValue<BigNumberish>;
  startAmount: PromiseOrValue<BigNumberish>;
  endAmount: PromiseOrValue<BigNumberish>;
};

export type OfferItemStructOutput = [
  number,
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  itemType: number;
  token: string;
  identifierOrCriteria: BigNumber;
  startAmount: BigNumber;
  endAmount: BigNumber;
};

export type ConsiderationItemStruct = {
  itemType: PromiseOrValue<BigNumberish>;
  token: PromiseOrValue<string>;
  identifierOrCriteria: PromiseOrValue<BigNumberish>;
  startAmount: PromiseOrValue<BigNumberish>;
  endAmount: PromiseOrValue<BigNumberish>;
  recipient: PromiseOrValue<string>;
};

export type ConsiderationItemStructOutput = [
  number,
  string,
  BigNumber,
  BigNumber,
  BigNumber,
  string
] & {
  itemType: number;
  token: string;
  identifierOrCriteria: BigNumber;
  startAmount: BigNumber;
  endAmount: BigNumber;
  recipient: string;
};

export type OrderParametersStruct = {
  offerer: PromiseOrValue<string>;
  zone: PromiseOrValue<string>;
  offer: OfferItemStruct[];
  consideration: ConsiderationItemStruct[];
  orderType: PromiseOrValue<BigNumberish>;
  startTime: PromiseOrValue<BigNumberish>;
  endTime: PromiseOrValue<BigNumberish>;
  zoneHash: PromiseOrValue<BytesLike>;
  salt: PromiseOrValue<BigNumberish>;
  conduitKey: PromiseOrValue<BytesLike>;
  totalOriginalConsiderationItems: PromiseOrValue<BigNumberish>;
};

export type OrderParametersStructOutput = [
  string,
  string,
  OfferItemStructOutput[],
  ConsiderationItemStructOutput[],
  number,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  string,
  BigNumber
] & {
  offerer: string;
  zone: string;
  offer: OfferItemStructOutput[];
  consideration: ConsiderationItemStructOutput[];
  orderType: number;
  startTime: BigNumber;
  endTime: BigNumber;
  zoneHash: string;
  salt: BigNumber;
  conduitKey: string;
  totalOriginalConsiderationItems: BigNumber;
};

export interface SeaportValidatorHelperInterface extends utils.Interface {
  functions: {
    "ERC1155_INTERFACE_ID()": FunctionFragment;
    "ERC20_INTERFACE_ID()": FunctionFragment;
    "ERC721_INTERFACE_ID()": FunctionFragment;
    "checkInterface(address,bytes4)": FunctionFragment;
    "creatorFeeEngine()": FunctionFragment;
    "getCreatorFeeInfo(address,uint256,uint256,uint256)": FunctionFragment;
    "getMerkleProof(uint256[],uint256)": FunctionFragment;
    "getMerkleRoot(uint256[])": FunctionFragment;
    "isPaymentToken(uint8)": FunctionFragment;
    "sortMerkleTokens(uint256[])": FunctionFragment;
    "validateConsiderationItem((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),uint256,address)": FunctionFragment;
    "validateConsiderationItemParameters((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),uint256,address)": FunctionFragment;
    "validateConsiderationItems((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),address)": FunctionFragment;
    "validateStrictLogic((address,address,(uint8,address,uint256,uint256,uint256)[],(uint8,address,uint256,uint256,uint256,address)[],uint8,uint256,uint256,bytes32,uint256,bytes32,uint256),address,uint256,bool)": FunctionFragment;
    "verifyMerkleProof(bytes32,bytes32[],uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ERC1155_INTERFACE_ID"
      | "ERC20_INTERFACE_ID"
      | "ERC721_INTERFACE_ID"
      | "checkInterface"
      | "creatorFeeEngine"
      | "getCreatorFeeInfo"
      | "getMerkleProof"
      | "getMerkleRoot"
      | "isPaymentToken"
      | "sortMerkleTokens"
      | "validateConsiderationItem"
      | "validateConsiderationItemParameters"
      | "validateConsiderationItems"
      | "validateStrictLogic"
      | "verifyMerkleProof"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ERC1155_INTERFACE_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERC20_INTERFACE_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ERC721_INTERFACE_ID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "checkInterface",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "creatorFeeEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCreatorFeeInfo",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getMerkleProof",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getMerkleRoot",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "isPaymentToken",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "sortMerkleTokens",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "validateConsiderationItem",
    values: [
      OrderParametersStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateConsiderationItemParameters",
    values: [
      OrderParametersStruct,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateConsiderationItems",
    values: [OrderParametersStruct, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "validateStrictLogic",
    values: [
      OrderParametersStruct,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyMerkleProof",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "ERC1155_INTERFACE_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC20_INTERFACE_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ERC721_INTERFACE_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "creatorFeeEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCreatorFeeInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMerkleProof",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isPaymentToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sortMerkleTokens",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateConsiderationItem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateConsiderationItemParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateConsiderationItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateStrictLogic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyMerkleProof",
    data: BytesLike
  ): Result;

  events: {};
}

export interface SeaportValidatorHelper extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SeaportValidatorHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ERC1155_INTERFACE_ID(overrides?: CallOverrides): Promise<[string]>;

    ERC20_INTERFACE_ID(overrides?: CallOverrides): Promise<[string]>;

    ERC721_INTERFACE_ID(overrides?: CallOverrides): Promise<[string]>;

    checkInterface(
      token: PromiseOrValue<string>,
      interfaceHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    creatorFeeEngine(overrides?: CallOverrides): Promise<[string]>;

    getCreatorFeeInfo(
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      transactionAmountStart: PromiseOrValue<BigNumberish>,
      transactionAmountEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        recipient: string;
        creatorFeeAmountStart: BigNumber;
        creatorFeeAmountEnd: BigNumber;
      }
    >;

    getMerkleProof(
      includedTokens: PromiseOrValue<BigNumberish>[],
      targetIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], ErrorsAndWarningsStructOutput] & {
        merkleProof: string[];
        errorsAndWarnings: ErrorsAndWarningsStructOutput;
      }
    >;

    getMerkleRoot(
      includedTokens: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [string, ErrorsAndWarningsStructOutput] & {
        merkleRoot: string;
        errorsAndWarnings: ErrorsAndWarningsStructOutput;
      }
    >;

    isPaymentToken(
      itemType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    sortMerkleTokens(
      includedTokens: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { sortedTokens: BigNumber[] }>;

    validateConsiderationItem(
      orderParameters: OrderParametersStruct,
      considerationItemIndex: PromiseOrValue<BigNumberish>,
      seaportAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [ErrorsAndWarningsStructOutput] & {
        errorsAndWarnings: ErrorsAndWarningsStructOutput;
      }
    >;

    validateConsiderationItemParameters(
      orderParameters: OrderParametersStruct,
      considerationItemIndex: PromiseOrValue<BigNumberish>,
      seaportAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [ErrorsAndWarningsStructOutput] & {
        errorsAndWarnings: ErrorsAndWarningsStructOutput;
      }
    >;

    validateConsiderationItems(
      orderParameters: OrderParametersStruct,
      seaportAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [ErrorsAndWarningsStructOutput] & {
        errorsAndWarnings: ErrorsAndWarningsStructOutput;
      }
    >;

    validateStrictLogic(
      orderParameters: OrderParametersStruct,
      primaryFeeRecipient: PromiseOrValue<string>,
      primaryFeeBips: PromiseOrValue<BigNumberish>,
      checkCreatorFee: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<
      [ErrorsAndWarningsStructOutput] & {
        errorsAndWarnings: ErrorsAndWarningsStructOutput;
      }
    >;

    verifyMerkleProof(
      merkleRoot: PromiseOrValue<BytesLike>,
      merkleProof: PromiseOrValue<BytesLike>[],
      valueToProve: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  ERC1155_INTERFACE_ID(overrides?: CallOverrides): Promise<string>;

  ERC20_INTERFACE_ID(overrides?: CallOverrides): Promise<string>;

  ERC721_INTERFACE_ID(overrides?: CallOverrides): Promise<string>;

  checkInterface(
    token: PromiseOrValue<string>,
    interfaceHash: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  creatorFeeEngine(overrides?: CallOverrides): Promise<string>;

  getCreatorFeeInfo(
    token: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    transactionAmountStart: PromiseOrValue<BigNumberish>,
    transactionAmountEnd: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      recipient: string;
      creatorFeeAmountStart: BigNumber;
      creatorFeeAmountEnd: BigNumber;
    }
  >;

  getMerkleProof(
    includedTokens: PromiseOrValue<BigNumberish>[],
    targetIndex: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [string[], ErrorsAndWarningsStructOutput] & {
      merkleProof: string[];
      errorsAndWarnings: ErrorsAndWarningsStructOutput;
    }
  >;

  getMerkleRoot(
    includedTokens: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<
    [string, ErrorsAndWarningsStructOutput] & {
      merkleRoot: string;
      errorsAndWarnings: ErrorsAndWarningsStructOutput;
    }
  >;

  isPaymentToken(
    itemType: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  sortMerkleTokens(
    includedTokens: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  validateConsiderationItem(
    orderParameters: OrderParametersStruct,
    considerationItemIndex: PromiseOrValue<BigNumberish>,
    seaportAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ErrorsAndWarningsStructOutput>;

  validateConsiderationItemParameters(
    orderParameters: OrderParametersStruct,
    considerationItemIndex: PromiseOrValue<BigNumberish>,
    seaportAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ErrorsAndWarningsStructOutput>;

  validateConsiderationItems(
    orderParameters: OrderParametersStruct,
    seaportAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<ErrorsAndWarningsStructOutput>;

  validateStrictLogic(
    orderParameters: OrderParametersStruct,
    primaryFeeRecipient: PromiseOrValue<string>,
    primaryFeeBips: PromiseOrValue<BigNumberish>,
    checkCreatorFee: PromiseOrValue<boolean>,
    overrides?: CallOverrides
  ): Promise<ErrorsAndWarningsStructOutput>;

  verifyMerkleProof(
    merkleRoot: PromiseOrValue<BytesLike>,
    merkleProof: PromiseOrValue<BytesLike>[],
    valueToProve: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    ERC1155_INTERFACE_ID(overrides?: CallOverrides): Promise<string>;

    ERC20_INTERFACE_ID(overrides?: CallOverrides): Promise<string>;

    ERC721_INTERFACE_ID(overrides?: CallOverrides): Promise<string>;

    checkInterface(
      token: PromiseOrValue<string>,
      interfaceHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    creatorFeeEngine(overrides?: CallOverrides): Promise<string>;

    getCreatorFeeInfo(
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      transactionAmountStart: PromiseOrValue<BigNumberish>,
      transactionAmountEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        recipient: string;
        creatorFeeAmountStart: BigNumber;
        creatorFeeAmountEnd: BigNumber;
      }
    >;

    getMerkleProof(
      includedTokens: PromiseOrValue<BigNumberish>[],
      targetIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [string[], ErrorsAndWarningsStructOutput] & {
        merkleProof: string[];
        errorsAndWarnings: ErrorsAndWarningsStructOutput;
      }
    >;

    getMerkleRoot(
      includedTokens: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<
      [string, ErrorsAndWarningsStructOutput] & {
        merkleRoot: string;
        errorsAndWarnings: ErrorsAndWarningsStructOutput;
      }
    >;

    isPaymentToken(
      itemType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    sortMerkleTokens(
      includedTokens: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    validateConsiderationItem(
      orderParameters: OrderParametersStruct,
      considerationItemIndex: PromiseOrValue<BigNumberish>,
      seaportAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ErrorsAndWarningsStructOutput>;

    validateConsiderationItemParameters(
      orderParameters: OrderParametersStruct,
      considerationItemIndex: PromiseOrValue<BigNumberish>,
      seaportAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ErrorsAndWarningsStructOutput>;

    validateConsiderationItems(
      orderParameters: OrderParametersStruct,
      seaportAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<ErrorsAndWarningsStructOutput>;

    validateStrictLogic(
      orderParameters: OrderParametersStruct,
      primaryFeeRecipient: PromiseOrValue<string>,
      primaryFeeBips: PromiseOrValue<BigNumberish>,
      checkCreatorFee: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<ErrorsAndWarningsStructOutput>;

    verifyMerkleProof(
      merkleRoot: PromiseOrValue<BytesLike>,
      merkleProof: PromiseOrValue<BytesLike>[],
      valueToProve: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    ERC1155_INTERFACE_ID(overrides?: CallOverrides): Promise<BigNumber>;

    ERC20_INTERFACE_ID(overrides?: CallOverrides): Promise<BigNumber>;

    ERC721_INTERFACE_ID(overrides?: CallOverrides): Promise<BigNumber>;

    checkInterface(
      token: PromiseOrValue<string>,
      interfaceHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    creatorFeeEngine(overrides?: CallOverrides): Promise<BigNumber>;

    getCreatorFeeInfo(
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      transactionAmountStart: PromiseOrValue<BigNumberish>,
      transactionAmountEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMerkleProof(
      includedTokens: PromiseOrValue<BigNumberish>[],
      targetIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMerkleRoot(
      includedTokens: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isPaymentToken(
      itemType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sortMerkleTokens(
      includedTokens: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateConsiderationItem(
      orderParameters: OrderParametersStruct,
      considerationItemIndex: PromiseOrValue<BigNumberish>,
      seaportAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateConsiderationItemParameters(
      orderParameters: OrderParametersStruct,
      considerationItemIndex: PromiseOrValue<BigNumberish>,
      seaportAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateConsiderationItems(
      orderParameters: OrderParametersStruct,
      seaportAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    validateStrictLogic(
      orderParameters: OrderParametersStruct,
      primaryFeeRecipient: PromiseOrValue<string>,
      primaryFeeBips: PromiseOrValue<BigNumberish>,
      checkCreatorFee: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifyMerkleProof(
      merkleRoot: PromiseOrValue<BytesLike>,
      merkleProof: PromiseOrValue<BytesLike>[],
      valueToProve: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ERC1155_INTERFACE_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ERC20_INTERFACE_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ERC721_INTERFACE_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkInterface(
      token: PromiseOrValue<string>,
      interfaceHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    creatorFeeEngine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCreatorFeeInfo(
      token: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      transactionAmountStart: PromiseOrValue<BigNumberish>,
      transactionAmountEnd: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMerkleProof(
      includedTokens: PromiseOrValue<BigNumberish>[],
      targetIndex: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMerkleRoot(
      includedTokens: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isPaymentToken(
      itemType: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sortMerkleTokens(
      includedTokens: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateConsiderationItem(
      orderParameters: OrderParametersStruct,
      considerationItemIndex: PromiseOrValue<BigNumberish>,
      seaportAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateConsiderationItemParameters(
      orderParameters: OrderParametersStruct,
      considerationItemIndex: PromiseOrValue<BigNumberish>,
      seaportAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateConsiderationItems(
      orderParameters: OrderParametersStruct,
      seaportAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    validateStrictLogic(
      orderParameters: OrderParametersStruct,
      primaryFeeRecipient: PromiseOrValue<string>,
      primaryFeeBips: PromiseOrValue<BigNumberish>,
      checkCreatorFee: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifyMerkleProof(
      merkleRoot: PromiseOrValue<BytesLike>,
      merkleProof: PromiseOrValue<BytesLike>[],
      valueToProve: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
