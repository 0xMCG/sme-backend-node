/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  ReadOnlyOrderValidator,
  ReadOnlyOrderValidatorInterface,
} from "../../../../../contracts/helpers/order-validator/lib/ReadOnlyOrderValidator";

const _abi = [
  {
    inputs: [],
    name: "BadContractSignature",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "v",
        type: "uint8",
      },
    ],
    name: "BadSignatureV",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSignature",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidSigner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "seaport",
        type: "address",
      },
      {
        components: [
          {
            components: [
              {
                internalType: "address",
                name: "offerer",
                type: "address",
              },
              {
                internalType: "address",
                name: "zone",
                type: "address",
              },
              {
                components: [
                  {
                    internalType: "enum ItemType",
                    name: "itemType",
                    type: "uint8",
                  },
                  {
                    internalType: "address",
                    name: "token",
                    type: "address",
                  },
                  {
                    internalType: "uint256",
                    name: "identifierOrCriteria",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "startAmount",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "endAmount",
                    type: "uint256",
                  },
                ],
                internalType: "struct OfferItem[]",
                name: "offer",
                type: "tuple[]",
              },
              {
                components: [
                  {
                    internalType: "enum ItemType",
                    name: "itemType",
                    type: "uint8",
                  },
                  {
                    internalType: "address",
                    name: "token",
                    type: "address",
                  },
                  {
                    internalType: "uint256",
                    name: "identifierOrCriteria",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "startAmount",
                    type: "uint256",
                  },
                  {
                    internalType: "uint256",
                    name: "endAmount",
                    type: "uint256",
                  },
                  {
                    internalType: "address payable",
                    name: "recipient",
                    type: "address",
                  },
                ],
                internalType: "struct ConsiderationItem[]",
                name: "consideration",
                type: "tuple[]",
              },
              {
                internalType: "enum OrderType",
                name: "orderType",
                type: "uint8",
              },
              {
                internalType: "uint256",
                name: "startTime",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "endTime",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "zoneHash",
                type: "bytes32",
              },
              {
                internalType: "uint256",
                name: "salt",
                type: "uint256",
              },
              {
                internalType: "bytes32",
                name: "conduitKey",
                type: "bytes32",
              },
              {
                internalType: "uint256",
                name: "totalOriginalConsiderationItems",
                type: "uint256",
              },
            ],
            internalType: "struct OrderParameters",
            name: "parameters",
            type: "tuple",
          },
          {
            internalType: "bytes",
            name: "signature",
            type: "bytes",
          },
        ],
        internalType: "struct Order[]",
        name: "orders",
        type: "tuple[]",
      },
    ],
    name: "canValidate",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60808060405234610016576117bd908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c63750906381461002757600080fd5b346102c55760407ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc3601126102c5576100616004356102ca565b67ffffffffffffffff602435116102c5573660236024350112156102c5576024356004013561008f81610408565b9061009d6040519283610386565b80825260208201903660248260051b81350101116102c5576024803501915b60248260051b813501018310610107576101036100f160043573ffffffffffffffffffffffffffffffffffffffff16866107fd565b60405190151581529081906020820190565b0390f35b82359067ffffffffffffffff82116102c5577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffdc916040838260243501360301126102c5576040519261015884610325565b60248281350101359067ffffffffffffffff82116102c5576101609082846024350101360301126102c55761018b6103c7565b61019c6024838582350101016102e8565b81526044916101b28382866024350101016102e8565b602083015267ffffffffffffffff6064828660243501010135116102c5576101e83660248035870184016064810135010161043c565b604083015260848185602435010101359067ffffffffffffffff82116102c557610220610164926024369184898335010101016104ed565b606084015261023760a482876024350101016105b1565b6080840152602435850190810160c481013560a085015260e481013560c085015261010481013560e0850152610124810135610100850152610144810135610120850152919091013561014083015290855201359167ffffffffffffffff83116102c5576024936102b46020949386869536928235010101610607565b8382015281520193019290506100bc565b600080fd5b73ffffffffffffffffffffffffffffffffffffffff8116036102c557565b35906102f3826102ca565b565b507f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040810190811067ffffffffffffffff82111761034157604052565b6103496102f5565b604052565b60a0810190811067ffffffffffffffff82111761034157604052565b60c0810190811067ffffffffffffffff82111761034157604052565b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff82111761034157604052565b60405190610160820182811067ffffffffffffffff82111761034157604052565b604051906080820182811067ffffffffffffffff82111761034157604052565b60209067ffffffffffffffff8111610422575b60051b0190565b61042a6102f5565b61041b565b359060068210156102c557565b81601f820112156102c55780359061045382610408565b9260409061046382519586610386565b838552602091828601918360a0809702860101948186116102c5578401925b858410610493575050505050505090565b86848303126102c55784879184516104aa8161034e565b6104b38761042f565b8152828701356104c2816102ca565b8382015285870135868201526060808801359082015260808088013590820152815201930192610482565b81601f820112156102c55780359061050482610408565b9260409061051482519586610386565b838552602091828601918360c0809702860101948186116102c5578401925b858410610544575050505050505090565b86848303126102c557848791845161055b8161036a565b6105648761042f565b815282870135610573816102ca565b838201528587013586820152606080880135908201526080808801359082015260a080880135906105a3826102ca565b820152815201930192610533565b359060058210156102c557565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f60209267ffffffffffffffff81116105fa575b01160190565b6106026102f5565b6105f4565b81601f820112156102c55780359061061e826105be565b9261062c6040519485610386565b828452602083830101116102c557816000926020809301838601378301015290565b51906102f3826102ca565b90916060828403126102c557815167ffffffffffffffff81116102c557820183601f820112156102c55780519061068f826105be565b9161069d6040519384610386565b8083526020958682840101116102c557859160005b8281106106d75750509160006040926106d4948301015294840151930161064e565b90565b81810184015185820185015283016106b2565b506040513d6000823e3d90fd5b604051906080820182811067ffffffffffffffff82111761072e575b60405260006060838281528260208201528260408201520152565b6107366102f5565b610713565b805182101561074f5760209160051b010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b507f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600511156107b857565b6102f361077e565b519081151582036102c557565b91908260809103126102c5576107e2826107c0565b916107ef602082016107c0565b916060604083015192015190565b9073ffffffffffffffffffffffffffffffffffffffff81166040918251917ff47b77400000000000000000000000000000000000000000000000000000000083526000600481858281865afa948515610a82575b8295610a5b575b506108616106f7565b50865196825b88811061087c57505050505050505050600190565b808888888861088d6001968861073b565b518051906080918a838201516108a2816107ae565b6108ab816107ae565b14610a4f576109188c848d6108de6108d7865173ffffffffffffffffffffffffffffffffffffffff1690565b9986611051565b9788918c518096819482937f46423aa700000000000000000000000000000000000000000000000000000000845283019190602083019252565b03915afa988915610a42575b81928296839b6109f5575b5050916109986109a99261097b6109ad9561095261094b6103e8565b9515158652565b61096260209a8b87019015159052565b6effffffffffffffffffffffffffffff92831690850152565b60609b168b8301906effffffffffffffffffffffffffffff169052565b6109a28188610a8f565b5051151590565b1590565b6109c0575b505050505050505b01610867565b6101406109dc9782015151910151036109e8575b015191610af6565b388881808080806109b2565b6109f06117a1565b6109d4565b610998929b5061097b97506109ad94506109a993509081610a2a92903d10610a3b575b610a228183610386565b8101906107cd565b9c919850919450909290919061092f565b503d610a18565b610a4a6106ea565b610924565b505050505050506109ba565b610a789195503d8084833e610a708183610386565b810190610659565b5090509338610858565b610a8a6106ea565b610851565b906020810151610ae4576effffffffffffffffffffffffffffff806040830151169182610ac0575b50505050600190565b60600151161115610ad357808080610ab7565b6310fda3e16000526020526024601cfd5b50631a5155746000526020526024601cfd5b939293338114610c6e57610b3c82867f19010000000000000000000000000000000000000000000000000000000000006000526002526022526042600020906000602252565b908351926002601f601d860116106102e27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9d86011016600014610c605760018085169081604103927fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbf600593880101831c93808952880160209384820151928560238560e81c94019460e31c1690815285845191185283925b868410610c4057505050505096610c3a916102f39798610bf9604060002092610c75565b600052526040600020907f19010000000000000000000000000000000000000000000000000000000000006000526002526022526042600020906000602252565b9061155a565b85859101938684821c841b16604060002081528786519118520192610bd5565b506102f3949550819061155a565b5050509050565b60098110610f0d5760118110610dc95760158110610d2b5760178110610ce05760177f403be09941a31d05cfc2f896505811353d45d38743288b016630cce39435476a9114027f1d51df90cba8de7637ca3e8fe1e3511d1dc2f23487d05dbdecb781860c21ac1c1890565b60157fbb40bf8cea3a5a716e2b6eb08bbdac8ec159f82f380783db3c56904f15a43d049114027f3bd8cff538aba49a9c374c806d277181e9651624b3e31111bc0624574f8bca1d1890565b60138110610d7e5760137f54b3212a178782f104e0d514b41a9a5c4ca9c980bf6597c3cecbf280917e202a9114027f5a4f867d3d458dabecad65f6201ceeaba0096df2d0c491cc32e6ea4e643500171890565b60117f2d7a3ed6dab270fdb8e054b2ad525f0ce2a8b89cc76c17f0965434740f673a559114027fc3939feff011e53ab8c35ca3370aad54c5df1fc2938cd62543174fa6e7d858771890565b600d8110610e6f57600f8110610e2457600f7fcc4886e37eedd9aacd6c1c2c9247197a621a71282e87a7cbc673f3736d9aa1419114027f1da3eed3ecef6ebaa6e5023c057ec2c75150693fd0dac5c90f4a142f9879fde81890565b600d7f8df51df98847160517f5b1186b4bc3f418d98b8a7f17f1292f392d79d600d79e9114027f6b5b04cbae4fcb1a9d78e7b2dfc51a36933d023cf6e347e03d517b472a8525901890565b600b8110610ec257600b7f32f4e7485d6485f9f6c255929b9905c62ba919758bbe231f231eaeecf33d810c9114027fbb98d87cc12922b83759626c5f07d72266da9702d19ffad6a514c73a89002f5f1890565b60097f6f0ec38c21f6f583ab7f3c5413c773ffd5344c34fde1d390958e438bf667448f9114027fd1d97d1ef5eaa37a4ee5fbf234e6f6d64eb511eb562221cd7edfbdde0848da051890565b60058110610fb35760078110610f685760077fb58d772fb09b426b9dece637f61ca9065f2b994f1464b51e9207f55f7c8f59489114027f7ff98d9d4e55d876c5cfac10b43c04039522f3ddfb0ea9bfe70c68cfb5c7cc141890565b60057f25d02425402d882d211a7ab774c0ed6eca048c4d03d9af40132475744753b2a39114027f1c19f71958cdd8f081b4c31f7caf5c010b29d12950be2fa1c95070dc47e30b551890565b600381106110065760037ff3e8417a785f980bdaf134fa0274a6bf891eeb8195cd94b09d2aa651046e28bc9114027fa02eb7ff164c884e5e2c336dc85f81c6a93329d8e9adf214b32729b894de2af11890565b60017f832c58a5b611aadcfa6a082ac9d04bace53d8278387f10040347b7e98eb5b3029114027fbf8e29b89f29ed9b529c154a63038ffca562f8d7cd1e2545dda53a1b582dde301890565b9190606083015151610140840151116111155773ffffffffffffffffffffffffffffffffffffffff926020848251166024604051809781937ff07ec373000000000000000000000000000000000000000000000000000000008352600483015286165afa938415611108575b6000946110d1575b50926106d49293611350565b6020813d8211611100575b816110e960209383610386565b810103126110fc575193506106d46110c5565b8480fd5b3d91506110dc565b6111106106ea565b6110bd565b63466aa6166000526004601cfd5b908160209103126102c5575190565b90600682101561113f5752565b61114761077e565b52565b90815180825260208080930193019160005b82811061116a575050505090565b909192938260a06001928751611181828251611132565b8084015173ffffffffffffffffffffffffffffffffffffffff16828501526040808201519083015260608082015190830152608090810151908201520195019392910161115c565b90815180825260208080930193019160005b8281106111e9575050505090565b909192938260c06001928751611200828251611132565b8084015173ffffffffffffffffffffffffffffffffffffffff9081168386015260408083015190840152606080830151908401526080808301519084015260a0918201511690820152019501939291016111db565b90600582101561113f5752565b6020815261128960208201835173ffffffffffffffffffffffffffffffffffffffff169052565b602082015173ffffffffffffffffffffffffffffffffffffffff16604082015260408201516112fd6112c96101609283606086015261018085019061114a565b60608501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08583030160808601526111c9565b92611310608082015160a0850190611255565b60a081015160c084015260c081015160e084015260e081015161010090818501528101516101209081850152810151906101409182850152015191015290565b73ffffffffffffffffffffffffffffffffffffffff9261148d916020936113756114da565b916113b1611397825173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff168452565b6113f06113d48783015173ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1684880152565b604081015160408401526060810151606084015261141e6080820151611415816107ae565b6080850161154e565b60a081015160a084015260c081015160c084015260e081015160e0840152610100808201519084015261012080910151908301526101408201526040519485809481937f79df72bd00000000000000000000000000000000000000000000000000000000835260048301611262565b0392165afa9081156114cd575b6000916114a5575090565b6106d4915060203d81116114c6575b6114be8183610386565b810190611123565b503d6114b4565b6114d56106ea565b61149a565b60405190610160820182811067ffffffffffffffff821117611541575b60405281610140600091828152826020820152606060408201526060808201528260808201528260a08201528260c08201528260e082015282610100820152826101208201520152565b6115496102f5565b6114f7565b600582101561113f5752565b909291926000948580528051957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0820180519188604103908091600181119687156116e4575b5050508514851515169788156115d6575b5050505050505050156115c057565b6115c861174e565b634f7fb80d6000526004601cfd5b909192939495809798508452604082527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffbc8401938451957fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc08201976020600060648b519c7f1626ba7e000000000000000000000000000000000000000000000000000000009e8f8c528d520189845afa9a8b611682575b505050505052525238808080808080806115b1565b60005103611690578061166d565b3b6115c8576116d657606001906041640101000000835160001a1a159114166116c15763815e1d646000526004601cfd5b631f003d0a6000525160001a6020526024601cfd5b638baa579f6000526004601cfd5b9091925060408601908151926060880151851a9061171c575b8752845260208360808660015afa508484528a865252513880806115a0565b50601b8360ff1c017f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff841683526116fd565b3d61175557565b601f3d0160051c60405160051c908060030291808211611788575b505060205a91011061177e57565b3d6000803e3d6000fd5b8080600392028380020360091c92030201013880611770565b50632165628a6000526004601cfdfea164736f6c6343000811000a";

type ReadOnlyOrderValidatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ReadOnlyOrderValidatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ReadOnlyOrderValidator__factory extends ContractFactory {
  constructor(...args: ReadOnlyOrderValidatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ReadOnlyOrderValidator> {
    return super.deploy(overrides || {}) as Promise<ReadOnlyOrderValidator>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ReadOnlyOrderValidator {
    return super.attach(address) as ReadOnlyOrderValidator;
  }
  override connect(signer: Signer): ReadOnlyOrderValidator__factory {
    return super.connect(signer) as ReadOnlyOrderValidator__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ReadOnlyOrderValidatorInterface {
    return new utils.Interface(_abi) as ReadOnlyOrderValidatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ReadOnlyOrderValidator {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ReadOnlyOrderValidator;
  }
}
