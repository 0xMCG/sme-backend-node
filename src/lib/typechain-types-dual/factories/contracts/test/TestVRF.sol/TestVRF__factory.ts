/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TestVRF,
  TestVRFInterface,
} from "../../../../contracts/test/TestVRF.sol/TestVRF";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32",
        name: "numWords",
        type: "uint32",
      },
    ],
    name: "requestRandomWords",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608080604052346014576082908161001a8239f35b600080fdfe6080806040526004361015601257600080fd5b600090813560e01c63e726f2e114602857600080fd5b3460715760207ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc36011260715760043563ffffffff8116809103606d57602092508152f35b8280fd5b5080fdfea164736f6c6343000811000a";

type TestVRFConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestVRFConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestVRF__factory extends ContractFactory {
  constructor(...args: TestVRFConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestVRF> {
    return super.deploy(overrides || {}) as Promise<TestVRF>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestVRF {
    return super.attach(address) as TestVRF;
  }
  override connect(signer: Signer): TestVRF__factory {
    return super.connect(signer) as TestVRF__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestVRFInterface {
    return new utils.Interface(_abi) as TestVRFInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestVRF {
    return new Contract(address, _abi, signerOrProvider) as TestVRF;
  }
}
